// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"
	pb_account "project_T4/proto/account/pb_account"

	mock "github.com/stretchr/testify/mock"
)

// AccountBankAdapter is an autogenerated mocks type for the AccountBankAdapter type
type AccountBankAdapter struct {
	mock.Mock
}

// GetAccount provides a mocks function with given fields: ctx, in
func (_m *AccountBankAdapter) GetAccount(ctx context.Context, in *pb_account.GetAccountRequest) (*pb_account.GetAccountResponse, error) {
	ret := _m.Called(ctx, in)

	var r0 *pb_account.GetAccountResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb_account.GetAccountRequest) (*pb_account.GetAccountResponse, error)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb_account.GetAccountRequest) *pb_account.GetAccountResponse); ok {
		r0 = rf(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb_account.GetAccountResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb_account.GetAccountRequest) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAccountBankAdapter creates a new instance of AccountBankAdapter. It also registers a testing interface on the mocks and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccountBankAdapter(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccountBankAdapter {
	mock := &AccountBankAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
