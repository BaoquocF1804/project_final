// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: service2.proto

package pb_connect

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConnectBankClient is the client API for ConnectBank service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnectBankClient interface {
	GetUserFromID(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
}

type connectBankClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectBankClient(cc grpc.ClientConnInterface) ConnectBankClient {
	return &connectBankClient{cc}
}

func (c *connectBankClient) GetUserFromID(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, "/pb_connect.ConnectBank/GetUserFromID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnectBankServer is the server API for ConnectBank service.
// All implementations must embed UnimplementedConnectBankServer
// for forward compatibility
type ConnectBankServer interface {
	GetUserFromID(context.Context, *GetAccountRequest) (*GetUserResponse, error)
	mustEmbedUnimplementedConnectBankServer()
}

// UnimplementedConnectBankServer must be embedded to have forward compatible implementations.
type UnimplementedConnectBankServer struct {
}

func (UnimplementedConnectBankServer) GetUserFromID(context.Context, *GetAccountRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFromID not implemented")
}
func (UnimplementedConnectBankServer) mustEmbedUnimplementedConnectBankServer() {}

// UnsafeConnectBankServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnectBankServer will
// result in compilation errors.
type UnsafeConnectBankServer interface {
	mustEmbedUnimplementedConnectBankServer()
}

func RegisterConnectBankServer(s grpc.ServiceRegistrar, srv ConnectBankServer) {
	s.RegisterService(&ConnectBank_ServiceDesc, srv)
}

func _ConnectBank_GetUserFromID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectBankServer).GetUserFromID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_connect.ConnectBank/GetUserFromID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectBankServer).GetUserFromID(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConnectBank_ServiceDesc is the grpc.ServiceDesc for ConnectBank service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConnectBank_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb_connect.ConnectBank",
	HandlerType: (*ConnectBankServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserFromID",
			Handler:    _ConnectBank_GetUserFromID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service2.proto",
}
